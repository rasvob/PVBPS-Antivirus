using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using AntiVirusLib.Database;
using AntiVirusLib.Models;
using AntiVirusLib.Signatures;
using AntiVirusLib.VirusTotal;

namespace AntiVirusLib.Scanner
{
    public class MalwareScanner
    {
        private readonly string _index;
        private readonly string _custom;
        private readonly string _quarantine;

        private readonly IMapper<FileModel> _mapper;
        private readonly YaraGateway _yara;
        private readonly VirusTotalGateway _virusTotalGateway;
        private readonly StringsGateway _strings;

        public string ZipName => Path.Combine(_quarantine, $"malware_{Guid.NewGuid().ToString()}_{DateTime.Now:dd-MM-yyThh-mm-ss}.zip");

        public MalwareScanner(string yara, string index, string custom, string db, string quarantine, string apiKey, string stringsPath)
        {
            _index = index;
            _custom = custom;
            _quarantine = quarantine;

            _mapper = new DatabaseMapper(db);
            _yara = new YaraGateway(yara);
            _virusTotalGateway = new VirusTotalGateway(apiKey);
            _strings = new StringsGateway(stringsPath);
        }

        public async Task FastScan(FileModel model)
        {
            model.ComputeHashes();
            model.CreateFileInfo();
            model.ScanTime = DateTime.Now;
            FileModel one = _mapper.FindOne(model.Sha256Hash);

            if (one != null)
            {
                model.IsClean = false;
                model.DetectedBy = "Hash";
            }

            await Task.Factory.StartNew(() =>
            {
                IEnumerable<string> indexFile = _yara.ScanFile(model.FilePath, _index);
                IEnumerable<string> customFile = _yara.ScanFile(model.FilePath, _custom);
                var file = customFile as string[] ?? customFile.ToArray();
                var indexArr = indexFile as string[] ?? indexFile.ToArray();

                if (file.Any())
                {
                    model.IsClean = false;

                    if (model.DetectedBy is null)
                    {
                        model.DetectedBy = "Custom signature";
                    }
                }

                if (indexArr.Count() > 6)
                {
                    model.IsClean = false;

                    if (model.DetectedBy is null)
                    {
                        model.DetectedBy = "Common signatures";
                    }
                }

                model.MatchedSignatures.Clear();
                model.MatchedSignatures.AddRange(indexArr.Concat(file));

                model.Urls.Clear();
                model.Urls.AddRange(ListUrls(model.FilePath));

                
            });

            bool scanRe = await _virusTotalGateway.FastScanFile(model);

            if (scanRe)
            {
                if (model.VirusTotalReport.Positives > (double) model.VirusTotalReport.Total * 20 / 100)
                {
                    model.IsClean = false;

                    if (model.DetectedBy is null)
                    {
                        model.DetectedBy = "Online scan";
                    }
                }
            }
        }

        public async Task DeepScan(FileModel model)
        {
            await FastScan(model);

            if (model.VirusTotalReport.ScanId is null)
            {
                bool scanRe = await _virusTotalGateway.DeepScanFileSimple(model);

                if (scanRe)
                {
                    if (model.VirusTotalReport.Positives > (double) model.VirusTotalReport.Total * 20 / 100)
                    {
                        model.IsClean = false;

                        if (model.DetectedBy is null)
                        {
                            model.DetectedBy = "Online scan";
                        }
                    }
                }
            }
        }

        public void SaveToDb(FileModel model)
        {
            _mapper.Save(model);
        }

        public List<string> MoveFilesToQurantine(IEnumerable<string> filePaths)
        {
            var res = new List<string>();
            using (ZipArchive zip = ZipFile.Open(ZipName, ZipArchiveMode.Create))
            {
                foreach (string filePath in filePaths)
                {
                    try
                    {
                        zip.CreateEntryFromFile(filePath, Path.GetFileName(filePath));
                        File.Delete(filePath);
                    }
                    catch (Exception e)
                    {
                        res.Add(filePath);
                    }
                }
            }
            return res;
        }

        public IEnumerable<string> ListUrls(string path)
        {
            IEnumerable<string> scanFile = _strings.ScanFile(path);

            var linkParser = new Regex(@"\b(?:https?://|www\.)\S+\b", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            IEnumerable<string> many = scanFile.Select(t =>
            {
                MatchCollection collection = linkParser.Matches(t);
                List<string> res = new List<string>();
                foreach (Match o in collection)
                {
                    string url = o.Value;
                    res.Add(url);
                }
                return res;
            }).SelectMany(list => list.Select(t => t));

            return many;
        }
    }
}