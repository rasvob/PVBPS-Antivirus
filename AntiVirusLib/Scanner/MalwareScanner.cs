using System;
using System.Collections.Generic;
using System.Linq;
using AntiVirusLib.Database;
using AntiVirusLib.Models;
using AntiVirusLib.Signatures;

namespace AntiVirusLib.Scanner
{
    public class MalwareScanner
    {
        private readonly string _yaraPath;
        private readonly string _index;
        private readonly string _custom;
        private readonly string _db;
        private readonly string _quarantine;
        private readonly string _apiKey;

        private readonly IMapper<FileModel> _mapper;
        private readonly YaraGateway _yara;

        public MalwareScanner(string yara, string index, string custom, string db, string quarantine, string apiKey)
        {
            _yaraPath = yara;
            _index = index;
            _custom = custom;
            _db = db;
            _quarantine = quarantine;
            _apiKey = apiKey;

            _mapper = new DatabaseMapper(_db);
            _yara = new YaraGateway(_yaraPath);
        }

        public void FastScan(FileModel model)
        {
            model.ComputeHashes();
            model.ScanTime = DateTime.Now;
            FileModel one = _mapper.FindOne(model.Sha256Hash);

            if (one != null)
            {
                model.IsClean = false;
            }

            IEnumerable<string> indexFile = _yara.ScanFile(model.FilePath, _index);
            IEnumerable<string> customFile = _yara.ScanFile(model.FilePath, _custom);
            var file = customFile as string[] ?? customFile.ToArray();
            var indexArr = indexFile as string[] ?? indexFile.ToArray();

            if (file.Any() || indexArr.Count() > 6)
            {
                model.IsClean = false;
            }

            model.MatchedSignatures.Clear();
            model.MatchedSignatures.AddRange(indexArr.Concat(file));

            //TODO: Virus total
        }

        //TODO Deep scan
        public void DeepScan(FileModel model)
        {
            //FastScan(model);
            //IEnumerable<FileModel> all = _mapper.ListAll();
            FileModel one = _mapper.FindOne(model.Sha256Hash);

            model.ComputeHashes();
            model.ScanTime = model.ScanTime == DateTime.MinValue ? DateTime.Now : model.ScanTime;
            _mapper.Save(model);
        }

        public void SaveToDb(FileModel model)
        {
            _mapper.Save(model);
        }
    }
}